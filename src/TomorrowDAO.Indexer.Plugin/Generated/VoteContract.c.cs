// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: vote_contract.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace TomorrowDAO.Contracts.Vote {

  #region Events
  public partial class VoteSchemeCreated : aelf::IEvent<VoteSchemeCreated>
  {
    public global::System.Collections.Generic.IEnumerable<VoteSchemeCreated> GetIndexed()
    {
      return new List<VoteSchemeCreated>
      {
      };
    }

    public VoteSchemeCreated GetNonIndexed()
    {
      return new VoteSchemeCreated
      {
        VoteSchemeId = VoteSchemeId,
        VoteMechanism = VoteMechanism,
        IsLockToken = IsLockToken,
        IsQuadratic = IsQuadratic,
        TicketCost = TicketCost,
      };
    }
  }

  public partial class VotingItemRegistered : aelf::IEvent<VotingItemRegistered>
  {
    public global::System.Collections.Generic.IEnumerable<VotingItemRegistered> GetIndexed()
    {
      return new List<VotingItemRegistered>
      {
      };
    }

    public VotingItemRegistered GetNonIndexed()
    {
      return new VotingItemRegistered
      {
        DaoId = DaoId,
        VotingItemId = VotingItemId,
        SchemeId = SchemeId,
        AcceptedCurrency = AcceptedCurrency,
        RegisterTimestamp = RegisterTimestamp,
        StartTimestamp = StartTimestamp,
        EndTimestamp = EndTimestamp,
      };
    }
  }

  public partial class Voted : aelf::IEvent<Voted>
  {
    public global::System.Collections.Generic.IEnumerable<Voted> GetIndexed()
    {
      return new List<Voted>
      {
      };
    }

    public Voted GetNonIndexed()
    {
      return new Voted
      {
        VotingItemId = VotingItemId,
        Voter = Voter,
        Amount = Amount,
        VoteTimestamp = VoteTimestamp,
        Option = Option,
        VoteId = VoteId,
        IsFinished = IsFinished,
      };
    }
  }

  public partial class Staked : aelf::IEvent<Staked>
  {
    public global::System.Collections.Generic.IEnumerable<Staked> GetIndexed()
    {
      return new List<Staked>
      {
      };
    }

    public Staked GetNonIndexed()
    {
      return new Staked
      {
        DaoId = DaoId,
        Amount = Amount,
        Sender = Sender,
        Symbol = Symbol,
      };
    }
  }

  public partial class UnStakeRequested : aelf::IEvent<UnStakeRequested>
  {
    public global::System.Collections.Generic.IEnumerable<UnStakeRequested> GetIndexed()
    {
      return new List<UnStakeRequested>
      {
      };
    }

    public UnStakeRequested GetNonIndexed()
    {
      return new UnStakeRequested
      {
        DaoId = DaoId,
        Amount = Amount,
        Sender = Sender,
        TokenSymbol = TokenSymbol,
      };
    }
  }

  public partial class StakeableTokenSet : aelf::IEvent<StakeableTokenSet>
  {
    public global::System.Collections.Generic.IEnumerable<StakeableTokenSet> GetIndexed()
    {
      return new List<StakeableTokenSet>
      {
      };
    }

    public StakeableTokenSet GetNonIndexed()
    {
      return new StakeableTokenSet
      {
        DaoId = DaoId,
        AcceptedTokenList = AcceptedTokenList,
      };
    }
  }

  #endregion
  public static partial class VoteContractContainer
  {
    static readonly string __ServiceName = "VoteContract";

    #region Marshallers
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.InitializeInput> __Marshaller_InitializeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.InitializeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.CreateVoteSchemeInput> __Marshaller_CreateVoteSchemeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.CreateVoteSchemeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingRegisterInput> __Marshaller_VotingRegisterInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingRegisterInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VoteInput> __Marshaller_VoteInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VoteInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.StakeInput> __Marshaller_StakeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.StakeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.RequestUnStakeInput> __Marshaller_RequestUnStakeInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.RequestUnStakeInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.SetStakeableTokensInput> __Marshaller_SetStakeableTokensInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.SetStakeableTokensInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.SetVotingPowerWeightInput> __Marshaller_SetVotingPowerWeightInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.SetVotingPowerWeightInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.SetMaxVotingPowersInput> __Marshaller_SetMaxVotingPowersInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.SetMaxVotingPowersInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.SetUnstakeCooldownStatusInput> __Marshaller_SetUnstakeCooldownStatusInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.SetUnstakeCooldownStatusInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.SetEmergencyStatusInput> __Marshaller_SetEmergencyStatusInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.SetEmergencyStatusInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.WithdrawInEmergencyInput> __Marshaller_WithdrawInEmergencyInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.WithdrawInEmergencyInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Types.Hash> __Marshaller_aelf_Hash = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Types.Hash.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetSupportStakeTokensOutput> __Marshaller_GetSupportStakeTokensOutput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetSupportStakeTokensOutput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetStakeTokenAmountInput> __Marshaller_GetStakeTokenAmountInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetStakeTokenAmountInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.TokenAmountList> __Marshaller_TokenAmountList = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.TokenAmountList.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingPowersInfo> __Marshaller_VotingPowersInfo = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingPowersInfo.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Types.Address> __Marshaller_aelf_Address = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Types.Address.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingPowersOnProposalList> __Marshaller_VotingPowersOnProposalList = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingPowersOnProposalList.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetTokenVotingPowersWeightInput> __Marshaller_GetTokenVotingPowersWeightInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetTokenVotingPowersWeightInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Int32Value> __Marshaller_google_protobuf_Int32Value = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Int32Value.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetMaxVotingPowerInput> __Marshaller_GetMaxVotingPowerInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetMaxVotingPowerInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::Google.Protobuf.WellKnownTypes.Int64Value> __Marshaller_google_protobuf_Int64Value = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Int64Value.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetVotingItemInput> __Marshaller_GetVotingItemInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetVotingItemInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingItem> __Marshaller_VotingItem = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingItem.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetVotingResultInput> __Marshaller_GetVotingResultInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetVotingResultInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingResult> __Marshaller_VotingResult = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingResult.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.GetVotingSnapShotInput> __Marshaller_GetVotingSnapShotInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.GetVotingSnapShotInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotingRecord> __Marshaller_VotingRecord = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotingRecord.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::TomorrowDAO.Contracts.Vote.VotedIds> __Marshaller_VotedIds = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::TomorrowDAO.Contracts.Vote.VotedIds.Parser.ParseFrom);
    #endregion

    #region Methods
    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.InitializeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Initialize = new aelf::Method<global::TomorrowDAO.Contracts.Vote.InitializeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Initialize",
        __Marshaller_InitializeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.CreateVoteSchemeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateVoteScheme = new aelf::Method<global::TomorrowDAO.Contracts.Vote.CreateVoteSchemeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "CreateVoteScheme",
        __Marshaller_CreateVoteSchemeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.VotingRegisterInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Register = new aelf::Method<global::TomorrowDAO.Contracts.Vote.VotingRegisterInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Register",
        __Marshaller_VotingRegisterInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.VoteInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Vote = new aelf::Method<global::TomorrowDAO.Contracts.Vote.VoteInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Vote",
        __Marshaller_VoteInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.StakeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Stake = new aelf::Method<global::TomorrowDAO.Contracts.Vote.StakeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "Stake",
        __Marshaller_StakeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.RequestUnStakeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RequestUnStake = new aelf::Method<global::TomorrowDAO.Contracts.Vote.RequestUnStakeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "RequestUnStake",
        __Marshaller_RequestUnStakeInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.SetStakeableTokensInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetStakeableTokens = new aelf::Method<global::TomorrowDAO.Contracts.Vote.SetStakeableTokensInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetStakeableTokens",
        __Marshaller_SetStakeableTokensInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.SetVotingPowerWeightInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetVotingPowerWeight = new aelf::Method<global::TomorrowDAO.Contracts.Vote.SetVotingPowerWeightInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetVotingPowerWeight",
        __Marshaller_SetVotingPowerWeightInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.SetMaxVotingPowersInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetMaxVotingPowers = new aelf::Method<global::TomorrowDAO.Contracts.Vote.SetMaxVotingPowersInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetMaxVotingPowers",
        __Marshaller_SetMaxVotingPowersInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.SetUnstakeCooldownStatusInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetUnstakeCooldownStatus = new aelf::Method<global::TomorrowDAO.Contracts.Vote.SetUnstakeCooldownStatusInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetUnstakeCooldownStatus",
        __Marshaller_SetUnstakeCooldownStatusInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.SetEmergencyStatusInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetEmergencyStatus = new aelf::Method<global::TomorrowDAO.Contracts.Vote.SetEmergencyStatusInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "SetEmergencyStatus",
        __Marshaller_SetEmergencyStatusInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.WithdrawInEmergencyInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_WithdrawInEmergency = new aelf::Method<global::TomorrowDAO.Contracts.Vote.WithdrawInEmergencyInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        aelf::MethodType.Action,
        __ServiceName,
        "WithdrawInEmergency",
        __Marshaller_WithdrawInEmergencyInput,
        __Marshaller_google_protobuf_Empty);

    static readonly aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.GetSupportStakeTokensOutput> __Method_GetSupportStakeTokens = new aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.GetSupportStakeTokensOutput>(
        aelf::MethodType.View,
        __ServiceName,
        "GetSupportStakeTokens",
        __Marshaller_aelf_Hash,
        __Marshaller_GetSupportStakeTokensOutput);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetStakeTokenAmountInput, global::TomorrowDAO.Contracts.Vote.TokenAmountList> __Method_GetStakeTokenAmount = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetStakeTokenAmountInput, global::TomorrowDAO.Contracts.Vote.TokenAmountList>(
        aelf::MethodType.View,
        __ServiceName,
        "GetStakeTokenAmount",
        __Marshaller_GetStakeTokenAmountInput,
        __Marshaller_TokenAmountList);

    static readonly aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.VotingPowersInfo> __Method_GetUserVotingPower = new aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.VotingPowersInfo>(
        aelf::MethodType.View,
        __ServiceName,
        "GetUserVotingPower",
        __Marshaller_aelf_Hash,
        __Marshaller_VotingPowersInfo);

    static readonly aelf::Method<global::AElf.Types.Address, global::TomorrowDAO.Contracts.Vote.VotingPowersOnProposalList> __Method_GetVotingPowersOnProposalList = new aelf::Method<global::AElf.Types.Address, global::TomorrowDAO.Contracts.Vote.VotingPowersOnProposalList>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingPowersOnProposalList",
        __Marshaller_aelf_Address,
        __Marshaller_VotingPowersOnProposalList);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetTokenVotingPowersWeightInput, global::Google.Protobuf.WellKnownTypes.Int32Value> __Method_GetTokenVotingPowersWeight = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetTokenVotingPowersWeightInput, global::Google.Protobuf.WellKnownTypes.Int32Value>(
        aelf::MethodType.View,
        __ServiceName,
        "GetTokenVotingPowersWeight",
        __Marshaller_GetTokenVotingPowersWeightInput,
        __Marshaller_google_protobuf_Int32Value);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetMaxVotingPowerInput, global::Google.Protobuf.WellKnownTypes.Int64Value> __Method_GetMaxVotingPower = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetMaxVotingPowerInput, global::Google.Protobuf.WellKnownTypes.Int64Value>(
        aelf::MethodType.View,
        __ServiceName,
        "GetMaxVotingPower",
        __Marshaller_GetMaxVotingPowerInput,
        __Marshaller_google_protobuf_Int64Value);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingItemInput, global::TomorrowDAO.Contracts.Vote.VotingItem> __Method_GetVotingItem = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingItemInput, global::TomorrowDAO.Contracts.Vote.VotingItem>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingItem",
        __Marshaller_GetVotingItemInput,
        __Marshaller_VotingItem);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingResultInput, global::TomorrowDAO.Contracts.Vote.VotingResult> __Method_GetVotingResult = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingResultInput, global::TomorrowDAO.Contracts.Vote.VotingResult>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingResult",
        __Marshaller_GetVotingResultInput,
        __Marshaller_VotingResult);

    static readonly aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingSnapShotInput, global::TomorrowDAO.Contracts.Vote.VotingResult> __Method_GetVotingSnapShot = new aelf::Method<global::TomorrowDAO.Contracts.Vote.GetVotingSnapShotInput, global::TomorrowDAO.Contracts.Vote.VotingResult>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingSnapShot",
        __Marshaller_GetVotingSnapShotInput,
        __Marshaller_VotingResult);

    static readonly aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.VotingRecord> __Method_GetVotingRecord = new aelf::Method<global::AElf.Types.Hash, global::TomorrowDAO.Contracts.Vote.VotingRecord>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingRecord",
        __Marshaller_aelf_Hash,
        __Marshaller_VotingRecord);

    static readonly aelf::Method<global::AElf.Types.Address, global::TomorrowDAO.Contracts.Vote.VotedIds> __Method_GetVotingIds = new aelf::Method<global::AElf.Types.Address, global::TomorrowDAO.Contracts.Vote.VotedIds>(
        aelf::MethodType.View,
        __ServiceName,
        "GetVotingIds",
        __Marshaller_aelf_Address,
        __Marshaller_VotedIds);

    #endregion

    #region Descriptors
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::TomorrowDAO.Contracts.Vote.VoteContractReflection.Descriptor.Services[0]; }
    }

    public static global::System.Collections.Generic.IReadOnlyList<global::Google.Protobuf.Reflection.ServiceDescriptor> Descriptors
    {
      get
      {
        return new global::System.Collections.Generic.List<global::Google.Protobuf.Reflection.ServiceDescriptor>()
        {
          global::TomorrowDAO.Contracts.Vote.VoteContractReflection.Descriptor.Services[0],
        };
      }
    }
    #endregion

    /// <summary>Base class for the contract of VoteContract</summary>
    // public abstract partial class VoteContractBase : AElf.Sdk.CSharp.CSharpSmartContract<TomorrowDAO.Contracts.Vote.VoteContractState>
    // {
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Initialize(global::TomorrowDAO.Contracts.Vote.InitializeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateVoteScheme(global::TomorrowDAO.Contracts.Vote.CreateVoteSchemeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Register(global::TomorrowDAO.Contracts.Vote.VotingRegisterInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Vote(global::TomorrowDAO.Contracts.Vote.VoteInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty Stake(global::TomorrowDAO.Contracts.Vote.StakeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty RequestUnStake(global::TomorrowDAO.Contracts.Vote.RequestUnStakeInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetStakeableTokens(global::TomorrowDAO.Contracts.Vote.SetStakeableTokensInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetVotingPowerWeight(global::TomorrowDAO.Contracts.Vote.SetVotingPowerWeightInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetMaxVotingPowers(global::TomorrowDAO.Contracts.Vote.SetMaxVotingPowersInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetUnstakeCooldownStatus(global::TomorrowDAO.Contracts.Vote.SetUnstakeCooldownStatusInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty SetEmergencyStatus(global::TomorrowDAO.Contracts.Vote.SetEmergencyStatusInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Empty WithdrawInEmergency(global::TomorrowDAO.Contracts.Vote.WithdrawInEmergencyInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.GetSupportStakeTokensOutput GetSupportStakeTokens(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.TokenAmountList GetStakeTokenAmount(global::TomorrowDAO.Contracts.Vote.GetStakeTokenAmountInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingPowersInfo GetUserVotingPower(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingPowersOnProposalList GetVotingPowersOnProposalList(global::AElf.Types.Address input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Int32Value GetTokenVotingPowersWeight(global::TomorrowDAO.Contracts.Vote.GetTokenVotingPowersWeightInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::Google.Protobuf.WellKnownTypes.Int64Value GetMaxVotingPower(global::TomorrowDAO.Contracts.Vote.GetMaxVotingPowerInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingItem GetVotingItem(global::TomorrowDAO.Contracts.Vote.GetVotingItemInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingResult GetVotingResult(global::TomorrowDAO.Contracts.Vote.GetVotingResultInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingResult GetVotingSnapShot(global::TomorrowDAO.Contracts.Vote.GetVotingSnapShotInput input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotingRecord GetVotingRecord(global::AElf.Types.Hash input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    //   public virtual global::TomorrowDAO.Contracts.Vote.VotedIds GetVotingIds(global::AElf.Types.Address input)
    //   {
    //     throw new global::System.NotImplementedException();
    //   }
    //
    // }

    // public static aelf::ServerServiceDefinition BindService(VoteContractBase serviceImpl)
    // {
    //   return aelf::ServerServiceDefinition.CreateBuilder()
    //       .AddDescriptors(Descriptors)
    //       .AddMethod(__Method_Initialize, serviceImpl.Initialize)
    //       .AddMethod(__Method_CreateVoteScheme, serviceImpl.CreateVoteScheme)
    //       .AddMethod(__Method_Register, serviceImpl.Register)
    //       .AddMethod(__Method_Vote, serviceImpl.Vote)
    //       .AddMethod(__Method_Stake, serviceImpl.Stake)
    //       .AddMethod(__Method_RequestUnStake, serviceImpl.RequestUnStake)
    //       .AddMethod(__Method_SetStakeableTokens, serviceImpl.SetStakeableTokens)
    //       .AddMethod(__Method_SetVotingPowerWeight, serviceImpl.SetVotingPowerWeight)
    //       .AddMethod(__Method_SetMaxVotingPowers, serviceImpl.SetMaxVotingPowers)
    //       .AddMethod(__Method_SetUnstakeCooldownStatus, serviceImpl.SetUnstakeCooldownStatus)
    //       .AddMethod(__Method_SetEmergencyStatus, serviceImpl.SetEmergencyStatus)
    //       .AddMethod(__Method_WithdrawInEmergency, serviceImpl.WithdrawInEmergency)
    //       .AddMethod(__Method_GetSupportStakeTokens, serviceImpl.GetSupportStakeTokens)
    //       .AddMethod(__Method_GetStakeTokenAmount, serviceImpl.GetStakeTokenAmount)
    //       .AddMethod(__Method_GetUserVotingPower, serviceImpl.GetUserVotingPower)
    //       .AddMethod(__Method_GetVotingPowersOnProposalList, serviceImpl.GetVotingPowersOnProposalList)
    //       .AddMethod(__Method_GetTokenVotingPowersWeight, serviceImpl.GetTokenVotingPowersWeight)
    //       .AddMethod(__Method_GetMaxVotingPower, serviceImpl.GetMaxVotingPower)
    //       .AddMethod(__Method_GetVotingItem, serviceImpl.GetVotingItem)
    //       .AddMethod(__Method_GetVotingResult, serviceImpl.GetVotingResult)
    //       .AddMethod(__Method_GetVotingSnapShot, serviceImpl.GetVotingSnapShot)
    //       .AddMethod(__Method_GetVotingRecord, serviceImpl.GetVotingRecord)
    //       .AddMethod(__Method_GetVotingIds, serviceImpl.GetVotingIds).Build();
    // }

  }
}
#endregion

